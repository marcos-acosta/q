declare const KEYDOWN = "keydown";
declare const KEYUP = "keyup";
declare const KEYPRESS = "keypress";
type Keystrokes = Partial<KeyboardEvent> | Partial<KeyboardEvent>[];
export interface KeyboardHook {
    keyboardEvent: Keystrokes;
    callback: () => void;
    allowOnTextInput?: boolean | null | undefined;
    preventDefault?: boolean | null | undefined;
    allowWhen?: boolean | null | undefined;
}
export interface TypedKey {
    event: KeyboardEvent;
    basicRepresentation: string;
}
/**
 * Creates an event listener to match keyboard events with callback functions.
 * @param keyboardHooks - The list of KeyboardHooks to manage
 * @param eventType - (default: `keydown`) Which event to listen for (`keydown`, `keyup`, or `keypress`)
 * @param allowEarlyCompletion - (default: `false`) If set to true, then a KeyboardHook will be resolved as soon as it is the only remaining candidate for the current keystroke sequence
 * @returns A list of typed keys in the current (unresolved sequence)
 */
export default function useKeyboardControl(keyboardHooks: KeyboardHook[], eventType?: typeof KEYDOWN | typeof KEYUP | typeof KEYPRESS, allowEarlyCompletion?: boolean): TypedKey[];
export {};
